{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\navegador\\\\Desktop\\\\trabajo-mcga\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nconst initialState = {\n  email: undefined,\n  password: undefined,\n  logged: false,\n  message: undefined,\n  isLogging: false\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ON_CHANGE_EMAIL':\n      return _objectSpread({}, state, {\n        email: action.payload,\n        logged: false,\n        message: undefined\n      });\n\n    case 'ON_CHANGE_PASSWORD':\n      return _objectSpread({}, state, {\n        password: action.payload,\n        logged: false,\n        message: undefined\n      });\n\n    case 'LOGIN_PENDING':\n      return _objectSpread({}, state, {\n        isLogging: true\n      });\n\n    case 'LOGIN_SUCCESS':\n      return _objectSpread({}, state, {\n        isloging: false,\n        logged: action.payload.success,\n        message: action.payload.message\n      });\n\n    case 'LOGIN_ERROR':\n      return _objectSpread({}, state, {\n        isloging: false,\n        message: action.payload.message\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const onChangeEmail = event => {\n  const text = event.target.value;\n  return {\n    type: 'ON_CHANGE_EMAIL',\n    payload: text\n  };\n};\nexport const onChangePassword = event => {\n  const text = event.target.value;\n  return {\n    type: 'ON_CHANGE_PASSWORD',\n    payload: text\n  };\n};\nexport const handleLogin = (email, password) => {\n  return dispatch => {\n    dispatch({\n      type: 'LOGIN_PENDING'\n    });\n    const options = {\n      baseURL: 'http://localhost:4000/',\n      timeout: 25000,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    return fetch(\"http://localhost:4000/login\", _objectSpread({}, options, {\n      body: JSON.stringify({\n        email,\n        password\n      })\n    })).then(res => res.json()).then(data => {\n      if (!data.success) {\n        return Promise.reject(data);\n      }\n\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: data\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'LOGIN_ERROR',\n        payload: error\n      });\n    });\n  };\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;\n/*export const handleLogin = () => ({\r\nexport const onChangePassword = (event) => {\r\nconst text = event.target.value\r\nreturn {\r\ntype: 'ON_CHANGE_PASSWORD',\r\npayload: text\r\n}\r\n}\r\ntype: 'HANDLE_LOGIN',\r\nexport const handleLogin = (email, password) => {\r\nreturn (dispatch) =>{\r\ndispatch({\r\ntype: \"LOGIN_PENDING\"\r\n})\r\nfetch(\"http://localhost:4000/login\",{\r\nbaseURL: \"localhost:4000\",\r\ntimeout: 250000,\r\nmethod: \"POST\",\r\nheaders: {\r\n\"Content-Type\": \"application/json\"\r\n},\r\nbody : JSON.stringify({\r\nemail: email,\r\npassword: password\r\n})\r\n})\r\n.then(a => a.json())\r\n.then((data) =>{\r\nif(!data.success){\r\nreturn dispatch({\r\ntype: \"LOGIN_ERROR\",\r\npayload: data,\r\n})\r\n}\r\ndispatch({\r\ntype: \"LOGIN_SUCCESS\",\r\npayload: data,\r\n})\r\n})\r\n.catch((error) =>{\r\ndispatch({\r\ntype: \"LOGIN_ERROR\",\r\npayload: data,\r\n})\r\n})\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer, composeWithDevTools(\r\napplyMiddleware(...middleware),\r\n));\r\n\r\nexport default store\r\n})*/","map":{"version":3,"sources":["C:/Users/navegador/Desktop/trabajo-mcga/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","initialState","email","undefined","password","logged","message","isLogging","reducer","state","action","type","payload","isloging","success","onChangeEmail","event","text","target","value","onChangePassword","handleLogin","dispatch","options","baseURL","timeout","method","headers","fetch","body","JSON","stringify","then","res","json","data","Promise","reject","catch","error","middleware","store"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEC,SADY;AAEnBC,EAAAA,QAAQ,EAAED,SAFS;AAGnBE,EAAAA,MAAM,EAAE,KAHW;AAInBC,EAAAA,OAAO,EAAEH,SAJU;AAKnBI,EAAAA,SAAS,EAAE;AALQ,CAArB;;AAQA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,iBAAL;AACE,+BACKF,KADL;AAEEP,QAAAA,KAAK,EAAEQ,MAAM,CAACE,OAFhB;AAGEP,QAAAA,MAAM,EAAE,KAHV;AAIEC,QAAAA,OAAO,EAAEH;AAJX;;AAMF,SAAK,oBAAL;AACE,+BACKM,KADL;AAEEL,QAAAA,QAAQ,EAAEM,MAAM,CAACE,OAFnB;AAGEP,QAAAA,MAAM,EAAE,KAHV;AAIEC,QAAAA,OAAO,EAAEH;AAJX;;AAMF,SAAK,eAAL;AACE,+BACKM,KADL;AAEEF,QAAAA,SAAS,EAAE;AAFb;;AAIF,SAAK,eAAL;AACE,+BACKE,KADL;AAEEI,QAAAA,QAAQ,EAAE,KAFZ;AAGER,QAAAA,MAAM,EAAEK,MAAM,CAACE,OAAP,CAAeE,OAHzB;AAIER,QAAAA,OAAO,EAAEI,MAAM,CAACE,OAAP,CAAeN;AAJ1B;;AAMA,SAAK,aAAL;AACE,+BACKG,KADL;AAEEI,QAAAA,QAAQ,EAAE,KAFZ;AAGEP,QAAAA,OAAO,EAAEI,MAAM,CAACE,OAAP,CAAeN;AAH1B;;AAOJ;AACE,aAAOG,KAAP;AApCJ;AAsCD,CAvCD;;AAyCA,OAAO,MAAMM,aAAa,GAAIC,KAAD,IAAW;AACtC,QAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA1B;AACA,SAAO;AACLR,IAAAA,IAAI,EAAE,iBADD;AAELC,IAAAA,OAAO,EAAEK;AAFJ,GAAP;AAID,CANM;AAQP,OAAO,MAAMG,gBAAgB,GAAIJ,KAAD,IAAW;AACzC,QAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA1B;AACA,SAAO;AACLR,IAAAA,IAAI,EAAE,oBADD;AAELC,IAAAA,OAAO,EAAEK;AAFJ,GAAP;AAID,CANM;AAQP,OAAO,MAAMI,WAAW,GAAG,CAACnB,KAAD,EAAQE,QAAR,KAAqB;AAC9C,SAAQkB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AACPX,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAIA,UAAMY,OAAO,GAAG;AACdC,MAAAA,OAAO,EAAE,wBADK;AAEdC,MAAAA,OAAO,EAAE,KAFK;AAGdC,MAAAA,MAAM,EAAE,MAHM;AAIdC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAJK,KAAhB;AASA,WAAOC,KAAK,kDAAqCL,OAArC;AAA8CM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAE7B,QAAAA,KAAF;AAASE,QAAAA;AAAT,OAAf;AAApD,OAAL,CACJ4B,IADI,CACCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADR,EAEJF,IAFI,CAECG,IAAI,IAAI;AACZ,UAAI,CAACA,IAAI,CAACrB,OAAV,EAAmB;AACjB,eAAOsB,OAAO,CAACC,MAAR,CAAeF,IAAf,CAAP;AACD;;AACDb,MAAAA,QAAQ,CAAC;AACPX,QAAAA,IAAI,EAAE,eADC;AAEPC,QAAAA,OAAO,EAAEuB;AAFF,OAAD,CAAR;AAID,KAVI,EAWJG,KAXI,CAWEC,KAAK,IAAI;AACdjB,MAAAA,QAAQ,CAAC;AACPX,QAAAA,IAAI,EAAE,aADC;AAEPC,QAAAA,OAAO,EAAE2B;AAFF,OAAD,CAAR;AAID,KAhBI,CAAP;AAiBD,GA/BD;AAiCD,CAlCM;AAoCP,MAAMC,UAAU,GAAG,CAACxC,KAAD,CAAnB;AAEA,MAAMyC,KAAK,GAAG5C,WAAW,CAACW,OAAD,EAAUT,mBAAmB,CACpDD,eAAe,CAAC,GAAG0C,UAAJ,CADqC,CAA7B,CAAzB;AAIA,eAAeC,KAAf;AAIA","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst initialState = {\r\n  email: undefined,\r\n  password: undefined,\r\n  logged: false,\r\n  message: undefined,\r\n  isLogging: false,\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'ON_CHANGE_EMAIL':\r\n      return {\r\n        ...state,\r\n        email: action.payload,\r\n        logged: false,\r\n        message: undefined,\r\n      }\r\n    case 'ON_CHANGE_PASSWORD':\r\n      return {\r\n        ...state,\r\n        password: action.payload,\r\n        logged: false,\r\n        message: undefined\r\n      }\r\n    case 'LOGIN_PENDING':\r\n      return {\r\n        ...state,\r\n        isLogging: true,\r\n      }\r\n    case 'LOGIN_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isloging: false,\r\n        logged: action.payload.success,\r\n        message: action.payload.message,\r\n      }\r\n      case 'LOGIN_ERROR':\r\n        return {\r\n          ...state,\r\n          isloging: false,\r\n          message: action.payload.message,\r\n\r\n        }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const onChangeEmail = (event) => {\r\n  const text = event.target.value\r\n  return {\r\n    type: 'ON_CHANGE_EMAIL',\r\n    payload: text\r\n  }\r\n}\r\n\r\nexport const onChangePassword = (event) => {\r\n  const text = event.target.value\r\n  return {\r\n    type: 'ON_CHANGE_PASSWORD',\r\n    payload: text\r\n  }\r\n}\r\n\r\nexport const handleLogin = (email, password) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: 'LOGIN_PENDING',\r\n    })\r\n\r\n    const options = {\r\n      baseURL: 'http://localhost:4000/',\r\n      timeout: 25000,\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    return fetch(`http://localhost:4000/login`, { ...options, body: JSON.stringify({ email, password }) })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (!data.success) {\r\n          return Promise.reject(data)\r\n        }\r\n        dispatch({\r\n          type: 'LOGIN_SUCCESS',\r\n          payload: data,\r\n        })\r\n      })\r\n      .catch(error => {\r\n        dispatch({\r\n          type: 'LOGIN_ERROR',\r\n          payload: error,\r\n        })\r\n      })\r\n  }\r\n\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer, composeWithDevTools(\r\n  applyMiddleware(...middleware),\r\n));\r\n\r\nexport default store\r\n\r\n\r\n\r\n/*export const handleLogin = () => ({\r\nexport const onChangePassword = (event) => {\r\nconst text = event.target.value\r\nreturn {\r\ntype: 'ON_CHANGE_PASSWORD',\r\npayload: text\r\n}\r\n}\r\ntype: 'HANDLE_LOGIN',\r\nexport const handleLogin = (email, password) => {\r\nreturn (dispatch) =>{\r\ndispatch({\r\ntype: \"LOGIN_PENDING\"\r\n})\r\nfetch(\"http://localhost:4000/login\",{\r\nbaseURL: \"localhost:4000\",\r\ntimeout: 250000,\r\nmethod: \"POST\",\r\nheaders: {\r\n\"Content-Type\": \"application/json\"\r\n},\r\nbody : JSON.stringify({\r\nemail: email,\r\npassword: password\r\n})\r\n})\r\n.then(a => a.json())\r\n.then((data) =>{\r\nif(!data.success){\r\nreturn dispatch({\r\ntype: \"LOGIN_ERROR\",\r\npayload: data,\r\n})\r\n}\r\ndispatch({\r\ntype: \"LOGIN_SUCCESS\",\r\npayload: data,\r\n})\r\n})\r\n.catch((error) =>{\r\ndispatch({\r\ntype: \"LOGIN_ERROR\",\r\npayload: data,\r\n})\r\n})\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer, composeWithDevTools(\r\napplyMiddleware(...middleware),\r\n));\r\n\r\nexport default store\r\n})*/\r\n"]},"metadata":{},"sourceType":"module"}